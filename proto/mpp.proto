syntax = "proto3";
package mpp;

import "gogoproto/gogo.proto";
import "coprocessor.proto";
import "metapb.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

option java_package = "org.tikv.kvproto";

// TaskMeta contains meta of a mpp plan, including query's ts and task address.
message TaskMeta {
	uint64 start_ts = 1; // start ts of a query
	int64 task_id = 2; // if task id is -1 , it indicates a tidb task.
	int64 partition_id = 3; // Only used for hash partition
	string address = 4; // target address of this task.
	uint64 gather_id = 5; // used to distinguish different gathers in the mpp query.
	uint64 query_ts = 6; // timestamp when start to execute query, used for TiFlash miniTSO schedule.
	uint64 local_query_id = 7; // unique local query_id if tidb don't restart. So we can use query_ts + local_query_id + server_id to represent a global unique query.
	uint64 server_id = 8; // TiDB server id
}

message IsAliveRequest {
}

message IsAliveResponse {
    bool available = 1;
}

// Dipsatch the task request to different tiflash servers.
message DispatchTaskRequest {
	TaskMeta meta = 1;
	bytes encoded_plan = 2;
	int64 timeout = 3;
    repeated coprocessor.RegionInfo regions = 4; 
	// If this task contains table scan, we still need their region info.
	int64 schema_ver = 5;
	// Used for partition table scan
	repeated coprocessor.TableRegions table_regions = 6;
}

// Get response of DispatchTaskRequest.
message DispatchTaskResponse {
	Error error = 1;
	repeated metapb.Region retry_regions = 2;
}

// CancelTaskRequest closes the execution of a task.
message CancelTaskRequest {
	TaskMeta meta = 1;
	Error error = 2;
}

message CancelTaskResponse {
	Error error = 1;
}

// build connection between different tasks. Data is sent by the tasks that are closer to the data sources.
message EstablishMPPConnectionRequest {
    TaskMeta sender_meta = 1; // node closer to the source
	TaskMeta receiver_meta = 2; // node closer to the tidb mpp gather.
}

// when TiFlash sends data to TiDB, Data packets wrap tipb.SelectResponse, i.e., serialize tipb.SelectResponse into data;
// when TiFlash sends data to TiFlash, data blocks are serialized into chunks, and the execution_summaries in tipb.SelectResponse are serialized into data only for the last packet.
message MPPDataPacket {
    bytes data = 1;
	Error error = 2;
	repeated bytes chunks = 3;
	repeated uint64 stream_ids = 4;
}

message Error {
	int32 code = 1;
	string msg = 2;
}

message DisaggregatedTaskMeta {
    uint64 start_ts = 1; // start ts of a query
    uint64 query_ts = 2; // timestamp when start to execute query, used for TiFlash miniTSO schedule.
    uint64 local_query_id = 3; // unique local query_id if tidb don't restart. So we can use query_ts + local_query_id + server_id to represent a global unique query.
    int64 task_id = 4; // if task id is -1 , it indicates a tidb task.
    string executor_id = 5; // the exectuor id
}

message EstablishDisaggregatedTaskRequest {
    DisaggregatedTaskMeta meta = 1;
    string address = 2; // target address of this task.
    int64 timeout = 3;
    // The key ranges, Region meta that read node need to execute TableScan
    repeated coprocessor.RegionInfo regions = 4;
    int64 schema_ver = 5;
    // Used for partition table scan
    repeated coprocessor.TableRegions table_regions = 6;
    // The encoded TableScan + Selection. The write node can use it
    // to build the rough set filter.
    bytes encoded_plan = 7;
}

message EstablishDisaggregatedTaskResponse {
    Error error = 1;
    // The read node needs to update its region cache about
    // these regions
    repeated metapb.Region retry_regions = 2;
    // Write node maintains a snapshot with a lease time.
    // Read node should read the delta pages
    // (ColumnFileInMemory and ColumnFileTiny)
    // along with this store_id and snapshot_id.
    int64 store_id = 3;
    int64 snapshot_id = 4;
    // Serialized disaggregated segment
    repeated bytes segments = 5;
}

message FetchDisaggregatedPagesRequest {
    // The snapshot id to fetch pages 
    DisaggregatedTaskMeta meta = 1;
    // Renewed the lease for the snapshot_id. The unit is seconds.
    uint64 lease = 2;
    // It must be a subset of the delta_pages returned
    // in EstablishDisaggregatedTaskResponse.segments
    repeated uint64 pages = 3;
    // target address of this task
    string address = 4;
}

message PagesPacket {
    Error error = 1;
    // Serialized pages data
    // * ColumnFilePersisted alone with its schema, page data, field offsets
    // * ColumnFileInMemory alone with its serialized block
    repeated bytes chunks = 2;
    // Return tipb.SelectResponse.execution_summaries in the
    // last packet
    repeated bytes summaries = 3;
}
